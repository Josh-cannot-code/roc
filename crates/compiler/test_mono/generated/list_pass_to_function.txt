procedure List.3 (List.103, List.104, List.105):
    let List.482 : {List I64, I64} = CallByName List.64 List.103 List.104 List.105;
    let List.481 : List I64 = StructAtIndex 0 List.482;
    inc List.481;
    dec List.482;
    ret List.481;

procedure List.6 (#Attr.2):
    let List.488 : U64 = lowlevel ListLen #Attr.2;
    ret List.488;

procedure List.64 (List.100, List.101, List.102):
    let List.487 : U64 = CallByName List.6 List.100;
    let List.484 : Int1 = CallByName Num.22 List.101 List.487;
    if List.484 then
        let List.485 : {List I64, I64} = CallByName List.67 List.100 List.101 List.102;
        ret List.485;
    else
        let List.483 : {List I64, I64} = Struct {List.100, List.102};
        ret List.483;

procedure List.67 (#Attr.2, #Attr.3, #Attr.4):
    let List.486 : {List I64, I64} = lowlevel ListReplaceUnsafe #Attr.2 #Attr.3 #Attr.4;
    ret List.486;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.256 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.256;

procedure Test.2 (Test.3):
    let Test.6 : U64 = 0i64;
    let Test.7 : I64 = 0i64;
    let Test.5 : List I64 = CallByName List.3 Test.3 Test.6 Test.7;
    ret Test.5;

procedure Test.0 ():
    let Test.1 : List I64 = Array [1i64, 2i64, 3i64];
    let Test.4 : List I64 = CallByName Test.2 Test.1;
    ret Test.4;
