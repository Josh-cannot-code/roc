procedure List.2 (List.95, List.96):
    let List.487 : U64 = CallByName List.6 List.95;
    let List.483 : Int1 = CallByName Num.22 List.96 List.487;
    if List.483 then
        let List.485 : I64 = CallByName List.66 List.95 List.96;
        let List.484 : [C {}, C I64] = TagId(1) List.485;
        ret List.484;
    else
        let List.482 : {} = Struct {};
        let List.481 : [C {}, C I64] = TagId(0) List.482;
        ret List.481;

procedure List.6 (#Attr.2):
    let List.488 : U64 = lowlevel ListLen #Attr.2;
    ret List.488;

procedure List.66 (#Attr.2, #Attr.3):
    let List.486 : I64 = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.486;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.256 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.256;

procedure Test.1 (Test.2):
    let Test.6 : List I64 = Array [1i64, 2i64, 3i64];
    let Test.7 : U64 = 0i64;
    let Test.5 : [C {}, C I64] = CallByName List.2 Test.6 Test.7;
    dec Test.6;
    ret Test.5;

procedure Test.0 ():
    let Test.4 : {} = Struct {};
    let Test.3 : [C {}, C I64] = CallByName Test.1 Test.4;
    ret Test.3;
