procedure Dict.1 ():
    let Dict.520 : List {[], []} = Array [];
    let Dict.527 : U64 = 0i64;
    let Dict.528 : U64 = 8i64;
    let Dict.521 : List U64 = CallByName List.11 Dict.527 Dict.528;
    let Dict.524 : I8 = CallByName Dict.34;
    let Dict.525 : U64 = 8i64;
    let Dict.522 : List I8 = CallByName List.11 Dict.524 Dict.525;
    let Dict.523 : U64 = 0i64;
    let Dict.519 : {List {[], []}, List U64, List I8, U64} = Struct {Dict.520, Dict.521, Dict.522, Dict.523};
    ret Dict.519;

procedure Dict.34 ():
    let Dict.526 : I8 = -128i64;
    ret Dict.526;

procedure Dict.4 (Dict.507):
    let Dict.85 : U64 = StructAtIndex 3 Dict.507;
    dec Dict.507;
    ret Dict.85;

procedure List.11 (List.114, List.115):
    let List.482 : List I8 = CallByName List.68 List.115;
    let List.481 : List I8 = CallByName List.80 List.114 List.115 List.482;
    ret List.481;

procedure List.11 (List.114, List.115):
    let List.494 : List U64 = CallByName List.68 List.115;
    let List.493 : List U64 = CallByName List.80 List.114 List.115 List.494;
    ret List.493;

procedure List.68 (#Attr.2):
    let List.492 : List I8 = lowlevel ListWithCapacity #Attr.2;
    ret List.492;

procedure List.68 (#Attr.2):
    let List.504 : List U64 = lowlevel ListWithCapacity #Attr.2;
    ret List.504;

procedure List.71 (#Attr.2, #Attr.3):
    let List.489 : List I8 = lowlevel ListAppendUnsafe #Attr.2 #Attr.3;
    ret List.489;

procedure List.71 (#Attr.2, #Attr.3):
    let List.501 : List U64 = lowlevel ListAppendUnsafe #Attr.2 #Attr.3;
    ret List.501;

procedure List.80 (List.505, List.506, List.507):
    joinpoint List.483 List.116 List.117 List.118:
        let List.491 : U64 = 0i64;
        let List.485 : Int1 = CallByName Num.24 List.117 List.491;
        if List.485 then
            let List.490 : U64 = 1i64;
            let List.487 : U64 = CallByName Num.20 List.117 List.490;
            let List.488 : List I8 = CallByName List.71 List.118 List.116;
            jump List.483 List.116 List.487 List.488;
        else
            ret List.118;
    in
    jump List.483 List.505 List.506 List.507;

procedure List.80 (List.513, List.514, List.515):
    joinpoint List.495 List.116 List.117 List.118:
        let List.503 : U64 = 0i64;
        let List.497 : Int1 = CallByName Num.24 List.117 List.503;
        if List.497 then
            let List.502 : U64 = 1i64;
            let List.499 : U64 = CallByName Num.20 List.117 List.502;
            let List.500 : List U64 = CallByName List.71 List.118 List.116;
            jump List.495 List.116 List.499 List.500;
        else
            ret List.118;
    in
    jump List.495 List.513 List.514 List.515;

procedure Num.20 (#Attr.2, #Attr.3):
    let Num.257 : U64 = lowlevel NumSub #Attr.2 #Attr.3;
    ret Num.257;

procedure Num.24 (#Attr.2, #Attr.3):
    let Num.259 : Int1 = lowlevel NumGt #Attr.2 #Attr.3;
    ret Num.259;

procedure Test.0 ():
    let Test.2 : {List {[], []}, List U64, List I8, U64} = CallByName Dict.1;
    let Test.1 : U64 = CallByName Dict.4 Test.2;
    ret Test.1;
